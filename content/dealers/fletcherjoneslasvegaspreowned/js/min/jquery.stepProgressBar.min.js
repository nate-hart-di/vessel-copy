!(function (t) {
  function s(s, e) {
    (this.el = s),
      (this.$el = t(s)),
      (this.instanceId = Math.round(new Date().getTime() + 100 * Math.random())),
      (this.settings = t.extend({}, t.fn[i].defaults, e)),
      (this.stepFields = [
        'value',
        'topLabel',
        'bottomLabel',
        'mouseOver',
        'click',
      ]),
      this.init();
  }
  function e(t, s) {
    return t.value - s.value;
  }
  var i = 'stepProgressBar';
  s.prototype = {
    init: function () {
      this._buildBar(),
        this.settings.steps && this.settings.steps.length > 0 && (this._buildStepsWrapper(), this._updateSteps());
    },
    destroy: function () {},
    getCurrentValue: function () {
      return this.settings.currentValue;
    },
    setCurrentValue: function (t) {
      (this.settings.currentValue = t), this._updateProgress(), this._findNextStep(), this._updateNextStepElm();
    },
    findStep: function (t) {
      if (!p(t) && !p(this.settings.steps) && this.settings.steps.length > 0)
        for (var s = 0; s < this.settings.steps.length; s++)
          if (this.settings.steps[s].value == t) return this.settings.steps[s];
    },
    addStep: function (t) {
      p(t) || p(t.value) || (this.settings.steps.push(t), this._updateSteps());
    },
    removeStep: function (t) {
      if (!p(t) && !p(this.settings.steps) && this.settings.steps.length > 0) {
        for (var s = 0; s < this.settings.steps.length; s++)
          if (this.settings.steps[s].value == t) return void this._deleteStep(this.settings.steps[s], s);
        this._updateSteps();
      }
    },
    _buildBar: function () {
      this.$el.addClass('step-progressbar-container'),
        this.settings.rounded && this.$el.addClass('step-progressbar-rounded'),
        (this.topLabelContainer = t('<div>')),
        this.topLabelContainer.addClass('step-progressbar-toplabels'),
        this.$el.append(this.topLabelContainer),
        (this.barContainer = t('<div>')),
        this.barContainer.addClass('step-progressbar-bar-wrapper'),
        this.$el.append(this.barContainer),
        (this.barElm = t('<span>')),
        this.barElm.addClass('step-progressbar-bar'),
        this.barContainer.append(this.barElm),
        (this.progressElm = t('<span>')),
        this.progressElm.addClass('step-progressbar-progress'),
        this.barElm.append(this.progressElm),
        (this.bottomLabelContainer = t('<div>')),
        this.bottomLabelContainer.addClass('step-progressbar-bottomlabels'),
        this.$el.append(this.bottomLabelContainer);
    },
    _buildStepsWrapper: function () {
      (this.stepsWrapper = t('<span>')),
        this.stepsWrapper.addClass('step-progressbar-steps-wrapper'),
        this.barElm.append(this.stepsWrapper),
        (this.stepsContainer = t('<span>')),
        this.stepsContainer.addClass('step-progressbar-steps'),
        this.stepsWrapper.append(this.stepsContainer),
        (this.toplabelWrapper = t('<span>')),
        this.toplabelWrapper.addClass('step-progressbar-labels-wrapper'),
        this.topLabelContainer.append(this.toplabelWrapper),
        (this.bottomlabelWrapper = t('<span>')),
        this.bottomlabelWrapper.addClass('step-progressbar-labels-wrapper'),
        this.bottomLabelContainer.append(this.bottomlabelWrapper);
    },
    _calcCurrentProgressValue: function () {
      if (p(this.settings.steps) || (this.settings.steps && this.settings.steps.length <= 0)) this.progressValue = 100;
      else {
        var t = this._retrieveMinAndMaxSteps(),
          s = t.minValue,
          e = t.maxValue;
        this.progressValue = r(this.settings.currentValue, s, e);
      }
      return this.progressValue;
    },
    _calcStepsProgressValues: function () {
      if (!(p(this.settings.steps) || (this.settings.steps && this.settings.steps.length <= 0))) {
        for (
          var t = this._retrieveMinAndMaxSteps(), s = t.minValue, e = t.maxValue, i = 0;
          i < this.settings.steps.length;
          i++
        ) {
          var n = this.settings.steps[i];
          n.progressValue = r(n.value, s, e);
        }
        return this.settings.steps;
      }
    },
    _retrieveMinAndMaxSteps: function () {
      if (!(p(this.settings.steps) || (this.settings.steps && this.settings.steps.length <= 0))) {
        for (var t, s, e, i, r = 0; r < this.settings.steps.length; r++)
          p(e) && ((t = this.settings.steps[r].value), (e = this.settings.steps[r])),
            p(i) && ((s = this.settings.steps[r].value), (i = this.settings.steps[r])),
            this.settings.steps[r].value < t && ((t = this.settings.steps[r].value), (e = this.settings.steps[r])),
            this.settings.steps[r].value > s && ((s = this.settings.steps[r].value), (i = this.settings.steps[r]));
        return { minValue: t, minStep: e, maxValue: s, maxStep: i };
      }
    },
    _findNextStep: function () {
      if (!(p(this.settings.steps) || (this.settings.steps && this.settings.steps.length <= 0))) {
        if (p(this.settings.currentValue)) {
          var t = this._retrieveMinAndMaxSteps();
          return t.maxStep
            ? (this._setNextStep(t.maxStep), t.maxStep)
            : t.minStep
              ? (this._setNextStep(t.minStep), t.minStep)
              : void 0;
        }
        for (var s, e = 0; e < this.settings.steps.length; e++)
          p(s) && !p(this.settings.steps[e].value) && this.settings.steps[e].value > this.settings.currentValue
            ? (s = this.settings.steps[e])
            : !p(s) &&
              !p(this.settings.steps[e].value) &&
              this.settings.steps[e].value > this.settings.currentValue &&
              this.settings.steps[e].value < s.value &&
              (s = this.settings.steps[e]);
        return p(s) || this._setNextStep(s), s;
      }
    },
    _setNextStep: function (t) {
      if (!(p(this.settings.steps) || (this.settings.steps && this.settings.steps.length <= 0))) {
        for (var s = 0; s < this.settings.steps.length; s++) this.settings.steps[s].isNextStep = !1;
        t.isNextStep = !0;
      }
    },
    _updateNextStepElm: function () {
      if (!(p(this.settings.steps) || (this.settings.steps && this.settings.steps.length <= 0)))
        for (var t = 0; t < this.settings.steps.length; t++)
          1 != this.settings.steps[t].isNextStep || p(this.settings.steps[t].stepElement)
            ? (0 != this.settings.steps[t].isNextStep && !p(this.settings.steps[t].isNextStep)) ||
              p(this.settings.steps[t].stepElement) ||
              (this.settings.steps[t].stepElement.removeClass('step-progressbar-nextstep'),
              this.settings.steps[t].topLabelElement.removeClass('step-progressbar-nextstep'),
              this.settings.steps[t].bottomLabelElement.removeClass('step-progressbar-nextstep'))
            : (this.settings.steps[t].stepElement.addClass('step-progressbar-nextstep'),
              this.settings.steps[t].topLabelElement.addClass('step-progressbar-nextstep'),
              this.settings.steps[t].bottomLabelElement.addClass('step-progressbar-nextstep'));
    },
    _updateSteps: function () {
      this.settings.steps.sort(e),
        this._mergeDuplicatedSteps(),
        this._updateProgress(),
        this._calcStepsProgressValues(),
        this._findNextStep();
      for (var t = 0; t < this.settings.steps.length; t++)
        this._buildStep(this.settings.steps[t], t),
          this._buildTopLabel(this.settings.steps[t], t),
          this._buildBottomLabel(this.settings.steps[t], t);
      this._updateNextStepElm();
    },
    _updateProgress: function () {
      this.progressElm && this.progressElm.css('width', this._calcCurrentProgressValue() + '%');
    },
    _buildStep: function (s, e) {
      if (!(p(s) || (!p(s) && p(s.progressValue)))) {
        if (p(s.stepElement)) {
          var i = t('<span>');
          i.addClass('step-progressbar-step'), this.stepsContainer.append(i), (s.stepElement = i);
        }
        s.stepElement.removeClass('step-progressbar-firststep'),
          s.stepElement.removeClass('step-progressbar-laststep'),
          0 == e && s.stepElement.addClass('step-progressbar-firststep'),
          e == this.settings.steps.length - 1 && s.stepElement.addClass('step-progressbar-laststep'),
          s.stepElement.css('left', s.progressValue + '%');
      }
    },
    _deleteStep: function (t, s) {
      p(t) ||
        (t.stepElement && t.stepElement.remove(),
        t.topLabelElement && t.topLabelElement.remove(),
        t.bottomLabelElement && t.bottomLabelElement.remove(),
        this.settings.steps.splice(s, 1),
        delete t);
    },
    _mergeDuplicatedSteps: function () {
      var t = [];
      this.settings.steps.sort(e);
      for (var s = 0; s < this.settings.steps.length - 1; s++)
        if (this.settings.steps[s].value == this.settings.steps[s + 1].value) {
          var i = this._mergeSteps(this.settings.steps[s], this.settings.steps[s + 1]);
          (this.settings.steps[s] = i), (this.settings.steps[s + 1] = i), t.push(s + 1);
        }
      if (!p(t) && t.length > 0) {
        t.sort(), t.reverse();
        for (var r = 0; r < t.length; r++) this.settings.steps.splice(t[r], 1);
      }
    },
    _mergeSteps: function (t, s) {
      if (!p(t) || !p(s)) {
        if (p(t) && !p(s)) return s;
        if (!p(t) && p(s)) return t;
        var e = {};
        if (!p(this.stepFields) && this.stepFields.length >= 0)
          for (var i = 0; i < this.stepFields.length; i++) {
            var r = this.stepFields[i];
            e[r] = t[r] ? t[r] : s[r];
          }
        return e;
      }
    },
    _buildTopLabel: function (s, e) {
      if (!(p(s) || (!p(s) && p(s.progressValue)))) {
        if (p(s.topLabelElement)) {
          var i = t('<span>');
          i.addClass('step-progressbar-steplabel'), this.toplabelWrapper.append(i), (s.topLabelElement = i);
        }
        s.topLabelElement.removeClass('step-progressbar-firststep'),
          s.topLabelElement.removeClass('step-progressbar-laststep'),
          0 == e && s.topLabelElement.addClass('step-progressbar-firststep'),
          e == this.settings.steps.length - 1 && s.topLabelElement.addClass('step-progressbar-laststep'),
          s.topLabelElement.css('left', s.progressValue + '%');
        var r = s.topLabel ? s.topLabel : p(s.value) ? '' : this.settings.unit + s.value;
        s.topLabelElement.html(r);
      }
    },
    _buildBottomLabel: function (s, e) {
      if (!(p(s) || (!p(s) && p(s.progressValue)))) {
        if (p(s.bottomLabelElement)) {
          var i = t('<span>');
          i.addClass('step-progressbar-steplabel'), this.bottomlabelWrapper.append(i), (s.bottomLabelElement = i);
        }
        s.bottomLabelElement.removeClass('step-progressbar-firststep'),
          s.bottomLabelElement.removeClass('step-progressbar-laststep'),
          0 == e && s.bottomLabelElement.addClass('step-progressbar-firststep'),
          e == this.settings.steps.length - 1 && s.bottomLabelElement.addClass('step-progressbar-laststep'),
          s.bottomLabelElement.css('left', s.progressValue + '%'),
          s.bottomLabelElement.html(s.bottomLabel);
      }
    },
  };
  var p = function (t) {
      return null === t || void 0 === t;
    },
    r = function (t, s, e) {
      if (!p(t))
        return p(s) && p(e)
          ? 100
          : p(s) && !p(e)
            ? t < e
              ? 0
              : 100
            : p(e) && !p(s)
              ? t < s
                ? 0
                : 100
              : p(s) || p(e)
                ? void 0
                : t < s
                  ? 0
                  : t > e
                    ? 100
                    : ((t - s) / (e - s)) * 100;
    };
  (t.fn[i] = function (e) {
    var p = arguments;
    if (void 0 === e || 'object' == typeof e)
      return this.each(function () {
        t.data(this, 'plugin_' + i) || t.data(this, 'plugin_' + i, new s(this, e));
      });
    if ('string' == typeof e && '_' !== e[0] && 'init' !== e) {
      if (-1 !== t.inArray(e, t.fn[i].getters)) {
        var r = t.data(this[0], 'plugin_' + i);
        return r[e].apply(r, Array.prototype.slice.call(p, 1));
      }
      return this.each(function () {
        var r = t.data(this, 'plugin_' + i);
        r instanceof s && 'function' == typeof r[e] && r[e].apply(r, Array.prototype.slice.call(p, 1));
      });
    }
  }),
    (t.fn[i].getters = ['getCurrentValue', 'findStep']),
    (t.fn[i].defaults = {
      currentValue: 0,
      steps: [],
      rounded: !0,
      unit: '',
      responsiveLimit: 480,
      progressLabel: function (t, s, e, i) {
        return i + '%';
      },
      progressFill: void 0,
    });
})(jQuery);
